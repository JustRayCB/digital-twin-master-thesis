#import "config.typ": *

#show: template

= Introduction 

#definition[Digital Twin][
    A *Digital Twin* is a system where data flows between an existing *physical object* and a *digital object*.
    The digital object act as a replica of the physical one which means that when a change is made in
    the physical object, it automatically changes the state of the digital object and vice versa.
]

#figure(
    image("img/dt_example.png", width: 70%),
    caption: [
        Digital Twin example @gao_dt
    ],
)


There are actually 3 levels of digital _twinning_ : 
+ *Digital Model*: The digital model is a system where the  data doesn't flow automatically between the physical object and the digital object.
    The changes made in the physical object are not reflected in the digital object and vice versa.
+ *Digital Shadow*: The digital shadow is a system where data flows authomatically from the physical object to the digital object.
   The digital object is a replica of the physical one but it doesn't send data back to the physical object (*e.g no actuators*) .
    This is the most basic form of digital twin and it is used to monitor the physical object.
+ *Digital Twin*: The digital twin is a system where data flows both ways between the physical object and the digital object.
    The digital object is a replica of the physical one and it can send data back to the physical object.
    This is the most advanced form of digital twin and it is used to monitor and control the physical object.

#figure(
    image("img/dt_levels.png", width: 60%),
    caption: [
        Levels of Digital Twin from https://vidyatec.com/blog/the-4-levels-of-the-digital-twin-technology/
    ],
)

Digital Twin's systems have the following characteristics:
- *Real-time*: The digital twin is able to receive data from the physical object in real-time using 
    IoT sensors i.e the data is sent to the digital object as soon as it is generated. In order 
    to dynamically change its state. 
- *Predictive*: The digital twin is able to predict the behavior of the physical object using machine learning algorithms. 
- *Autonomous*: The digital twin is able to make decisions and take actions on its own using AI algorithms based 
    on the data it processes.
- *Visualization*: One should be able to visualize the data and the behavior of the physical object using a graphical interface. 
    The user should also be able to interact with the digital twin using this graphical interface.
- ...


== Modeling

One important key feature of the Digital Twin is the notion of model.
The model is a representation of the physical object that is used to simulate its behavior and performance.
The model *doesn't need to be a perfect replica of the physical object*, but it should be able
to capture the key features and behaviors of the physical object.
In our case of a digital twin of a Plant, we will capture variables such as
temperature, soil moisture, humidity, light intensity or growth rate.

While the model need to be a good representation, it doesn't mean that it has to be complex.
The model needs to be as good as we are able to replace the physical object with the digital one
(in a limited context e.g temperature, humidity, etc.) and to be able to predict the behavior of the physical object
with good accuracy.

=== State Estimation

The state estimation is the process of estimating the state of the physical object using the data generated by the sensors.
In our case, the state of the physical object is a set of variables that describe the behavior and performance of the plant and its environment. 
We will represent the state of the digital twin using two sets of variables, 
one that represent *the state of the environment* ($E(t)$) and one that represent *the internal state of the plant* ($I(t)$)

We can define the state of the environement as $ E(t) = {L(t), M(t), T(t), H(t)} $ where:
- *Light Intensity*: Measured in lux, it is the amount of light that is received by the plant. 
    $L(t) in [0, 65000]$
- *Soil Moisture*: Measured in percentage, it is the amount of water that is present in the soil. 
    $M(t) in [0, 100]$
- *Temperature*: Measured in Celsius, it is the temperature of the environement of the plant.
    $T(t) in [-40, 80]$
- *Humidity*: Measured in percentage, it is the amount of water vapor that is present in the air. 
    $H(t) in [0, 100]$

The internal state of the plant is defined as $ I(t) = {G(t), C(t)} $ where: 
- *Growth Rate*: Measured in cm/day, it is the rate at which the plant is growing. 
    $G(t) in [0, 100]$ 
- *Global Coloring*: Measured in RGB, it is the color of the plant. 
    $C(t) in [0, 255]$  #highlight(fill: aqua)[Check if it is really relevant]

The state of the digital twin is then defined as $ S(t)$ as a function of the state of the environment and the internal state of the plant: 
$ S(t) = f(E(t), I(t)) $ where: 
- $f$ is a function that maps the state of the environment and the internal state of the plant to the state of the digital twin. 
- $S(t)$ is the state of the digital twin at time $t$. 
- $E(t)$ is the state of the environment at time $t$. 
- $I(t)$ is the internal state of the plant at time $t$. 

=== Data Collection

In order to make predictions about the behavior of the plant, create simulations and to 
make decisions, data *collection*, data *processing*, data *storage* and data
*analysis* are an important part of the digital twin system.

The data collection is the process of collecting data from the sensors that are installed around the physical object.
The data is collected in real-time via *IoT* sensors and is then sent to the digital twin system. 
The following sensors are used to collect data from the plant:
- *Temperature & Humidity Sensor*: DHT22 sensor that is used to measure the temperature and humidity of the environment. 
- *Soil Moisture Sensor*: STEMMA Capacitive soil moisture sensor that is used to measure the moisture of the soil.  
- *Light Intensity Sensor*: BH1750 sensor that is used to measure the light intensity of the environment. 
- *Camera*: Raspberry Pi camera that is used to capture the image of the plant. The image is then processed using 
    image processing algorithms to extract the color of the plant, or othter relevant features.

#highlight(fill: aqua)[TODO: Explain more deeply how the sensors communicate with the RPI]

#highlight(fill: aqua)[
    TODO: See Spectral imaging, multispectral imaging, hyperspectral imaging 
    which are used of measures the reflextion of light from plant tissues (chlorophyll level, leaft structure).
    See also Nomalized Difference Vegetation Index (NDVI) which is used to measure the health of the plant base 
    on satellite or drone images.
]

/*
* Mon module ML service aura besoin d'être une application FLASK afin de pouvoir être appelée via 
* une API REST depuis l'application principale (web app).
* J'aurais besoin de faire une classe pour évaluer l'état ou bien pour voir si des threshold sont atteints.
*/

=== How to handle the huge amount of data?

While the time passes, the amount of data that is collected from the sensors
will increase and it will be difficult to store, process and analyze all the data.
Managing that flood of data, a few challenges might arise when implementing the Digital Twin system:
- *Managing Cardinality*: The digital twin as small as it is now might become a huge system 
    with a reasonable amount of sensors where each sensors might be measuring many different things 
    (e.g temperature, humidity, light intensity, etc.). High cardinality means that the system will be 
    managing a huge number of  *unique data streams*.
    Traditional database (like RDBMS, often row-based) can become inefficient when dealing with 
    millions of *unique time series*. Finding and analyzing data for just *one specific metric* accross time 
    can become slow and inefficient. Timeseries databases (like InfluxDB, TimescaleDB, etc.) are designed to handle 
    hight cardinality and store time series data column-wise.
- *Managing Volume*: The digital twin system might be collecting data sensors every second or even 
    every millisecond. Keeping every single data point for a long period of time can become expensive storage-wise. 
    One solution that we might use is to store the data in a *compressed format* or to use a *data retention policy*
    to delete old data that is not needed anymore. This means that we will keep the data for a certain period of time 
    and then delete it or summarize it (instead of second by second, we can keep the data every minute or every hour).
    This is called *downsampling* and it is a common practice in timeseries databases.
    - Note that Time-series database also have built-in compression algorithms that can be used to reduce the size of the data. 
- *Managing Velocity*: The digital twin system will be collecting data in real-time from the sensors.
    This means that the data will be flowing into the system at a high speed and it will be difficult to process 
    all the data in real-time. One solution that we might use is to use a *streaming platform* (like Spark Streaming)
    to handle the data flow and to process the data in real-time. This means that we will be able 
    to process the data as it is generated and to make decisions based on the data in real-time. 











=== Decision Making


#bibliography("./bibliography.bib", full: true)
